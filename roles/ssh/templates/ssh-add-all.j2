#!/bin/env bash

# Function to display a spinner animation
spinner() {
  local pid=$1
  local message=$2
  local spin='-\|/'
  local i=0

  # Save cursor position and hide cursor
  tput sc
  tput civis

  printf "%s " "$message"

  while kill -0 "$pid" 2>/dev/null; do
    i=$(((i + 1) % 4))
    printf "\b\033[1;36m%s\033[0m" "${spin:$i:1}"
    sleep 0.1
  done

  # Restore cursor position and show cursor
  tput rc
  tput cnorm

  # Clear the spinner line
  printf "\r\033[K"
}

# Function to show success or failure indicator
show_status() {
  local status=$1
  local message=$2

  if [ "$status" -eq 0 ]; then
    printf "\033[1;32m✓\033[0m %s\n" "$message"
  else
    printf "\033[1;31m✗\033[0m %s\n" "$message"
  fi
}

# Function to check if the expect is installed
check_expect_installed() {
  if ! command -v expect >/dev/null 2>&1; then
    printf "\033[1;31m✗\033[0m Error: 'expect' command is not installed. Please install it first.\n"
    exit 1
  fi
}

# Function to check if the Bitwarden CLI is installed
check_bw_installed() {
  if ! command -v bw >/dev/null 2>&1; then
    printf "\033[1;31m✗\033[0m Error: Bitwarden CLI ('bw') is not installed. Please install it first.\n"
    exit 1
  fi
}

# Function to check if the Bitwarden session is authenticated using bw status
check_bw_authentication() {
  local bw_status
  bw_status=$(bw status | jq -r '.status')

  case "$bw_status" in
  "locked")
    printf "\033[1;31m✗\033[0m Bitwarden vault is locked. Please run 'bw unlock' or the 'bw-unlock' script first.\n"
    return 1
    ;;
  "unauthenticated")
    printf "\033[1;31m✗\033[0m Bitwarden is not authenticated. Please run 'bw login' first.\n"
    return 1
    ;;
  "unlocked")
    return 0
    ;;
  *)
    printf "\033[1;31m✗\033[0m Unknown Bitwarden status: %s\n" "$bw_status"
    return 1
    ;;
  esac
}

# Function to get the password from Bitwarden
get_password_from_bw() {
  local item_name="$1"

  local item
  item=$(bw get item "$item_name" 2>/dev/null)

  if [ -z "$item" ]; then
    return 1
  fi

  local password
  password=$(echo "$item" | jq -r '.fields[] | select(.name == "Password") | .value')

  if [ -z "$password" ]; then
    return 1
  fi

  echo "$password"
  return 0
}

# Function to add SSH key to ssh-agent
add_ssh_key_to_agent() {
  local ssh_key_path="$1"
  local item_name="$2"
  local key_name=$(basename "$ssh_key_path")

  # Start a background process for the spinner
  (
    # Get password in background process
    if ! password=$(get_password_from_bw "$item_name"); then
      exit 1
    fi

    # Escape special characters for expect
    local escaped_password
    escaped_password=$(printf '%s\n' "$password" |
      sed -e 's/\\/\\\\/g' \
        -e 's/\[/\\[/g' \
        -e 's/\$/\\$/g' \
        -e 's/\^/\\^/g' \
        -e 's/\*/\\*/g' \
        -e 's/|/\\|/g' \
        -e 's/(/\\(/g' \
        -e 's/)/\\)/g' \
        -e 's/{/\\{/g' \
        -e 's/}/\\}/g' \
        -e 's/\./\\./g' \
        -e 's/?/\\?/g')

    # Use expect to handle password input for ssh-add
    expect <<-DONE >/dev/null 2>&1
spawn ssh-add "$ssh_key_path"
expect "Enter passphrase"
send "$escaped_password\r"
expect eof
DONE

    exit $?
  ) &

  # Get the PID of the background process
  local bg_pid=$!

  # Display spinner while the background process is running
  spinner $bg_pid "Adding key $key_name..."

  # Wait for the background process to finish and get its exit status
  wait $bg_pid
  local status=$?

  # Show success or failure indicator
  show_status $status "Key $key_name"

  return $status
}

# Main execution begins here

# Check if 'expect' is installed
check_expect_installed

# Check if Bitwarden CLI is installed
check_bw_installed

# Ensure Bitwarden is authenticated
check_bw_authentication || exit 1

# Path and item names for each SSH key
declare -A SSH_KEYS
{% for item in ssh_keys %}
SSH_KEYS["$HOME/.ssh/{{ item.name }}"]="{{ item.password_id }}"
{% endfor %}

# Iterate over each SSH key and process it
for ssh_key_path in "${!SSH_KEYS[@]}"; do
  add_ssh_key_to_agent "$ssh_key_path" "${SSH_KEYS[$ssh_key_path]}"
done
