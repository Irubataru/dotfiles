#!/bin/env bash

# Function to check if the expect is installed
check_expect_installed() {
  if ! command -v expect >/dev/null 2>&1; then
    echo "Error: 'expect' command is not installed. Please install it first."
    exit 1
  fi
}

# Function to check if the Bitwarden CLI is installed
check_bw_installed() {
  if ! command -v bw >/dev/null 2>&1; then
    echo "Error: Bitwarden CLI ('bw') is not installed. Please install it first."
    exit 1
  fi
}

# Function to check if the Bitwarden session is authenticated using bw status
check_bw_authentication() {
  local bw_status
  bw_status=$(bw status | jq -r '.status')

  case "$bw_status" in
    "locked")
      echo "Bitwarden vault is locked. Please run 'bw unlock' or the 'bw-unlock' script first."
      return 1
      ;;
    "unauthenticated")
      echo "Bitwarden is not authenticated. Please run 'bw login' first."
      return 1
      ;;
    "unlocked")
      return 0
      ;;
    *)
      echo "Unknown Bitwarden status: $bw_status"
      return 1
      ;;
  esac
}

# Function to get the password from Bitwarden
get_password_from_bw() {
  local item_name="$1"

  local item
  item=$(bw get item "$item_name" 2>/dev/null)

  if [ -z "$item" ]; then
    echo "Error: Unable to find item with name '$item_name' in Bitwarden."
    return 1
  fi

  local password
  password=$(echo "$item" | jq -r '.fields[] | select(.name == "Password") | .value')

  if [ -z "$password" ]; then
    echo "Error: Unable to extract password from item."
    return 1
  fi

  echo "$password"
  return 0
}

# Function to add SSH key to ssh-agent
add_ssh_key_to_agent() {
  local ssh_key_path="$1"
  local item_name="$2"

  echo "Processing SSH key for '$item_name'..."

  password=$(get_password_from_bw "$item_name")
  if ! password=$(get_password_from_bw "$item_name"); then
    echo "Failed to retrieve password for '$item_name'."
    return 1
  fi

  # Escape special characters for expect
  local escaped_password
  escaped_password=$(printf '%s\n' "$password" |
    sed -e 's/\\/\\\\/g' \
      -e 's/\[/\\[/g' \
      -e 's/\$/\\$/g' \
      -e 's/\^/\\^/g' \
      -e 's/\*/\\*/g' \
      -e 's/|/\\|/g' \
      -e 's/(/\\(/g' \
      -e 's/)/\\)/g' \
      -e 's/{/\\{/g' \
      -e 's/}/\\}/g' \
      -e 's/\./\\./g' \
      -e 's/?/\\?/g')

  # Use expect to handle password input for ssh-add
  expect <<-DONE
spawn ssh-add "$ssh_key_path"
expect "Enter passphrase"
send "$escaped_password\r"
expect eof
DONE

  if [ $? -ne 0 ]; then
    echo "Error: Failed to add SSH key '$ssh_key_path' to ssh-agent."
    return 1
  fi

  echo "SSH key '$ssh_key_path' successfully added to ssh-agent."
  return 0
}

# Main execution begins here

# Check if 'expect' is installed
check_expect_installed

# Check if Bitwarden CLI is installed
check_bw_installed

# Ensure Bitwarden is authenticated
check_bw_authentication || exit 1

# Path and item names for each SSH key
declare -A SSH_KEYS
{% for item in ssh_keys %}
SSH_KEYS["$HOME/.ssh/{{ item.name }}"]="{{ item.password_id }}"
{% endfor %}

# Iterate over each SSH key and process it
for ssh_key_path in "${!SSH_KEYS[@]}"; do
  add_ssh_key_to_agent "$ssh_key_path" "${SSH_KEYS[$ssh_key_path]}"
done
