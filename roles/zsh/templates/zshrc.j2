# Uncomment to profile zsh startup time
# zmodload zsh/zprof

{% if 'gpg' in modules %}
# Set the gpg tty so we are prompted for passwords and pins
export GPG_TTY=$(tty)

# Path to the dotfiles
export DOTFILES={{ dotfiles_directory }}

{% endif %}
# Some options (man zshoptions)
setopt autocd extendedglob nomatch menucomplete

# No one likes beep
unsetopt BEEP

## Initialize autocomplete
autoload -Uz compinit && compinit

# Add paths in case the ones from /etc/profile.d weren't sourced
source ~/.bash_userpaths.sh

roles=(
{% for item in modules %}
  "{{ item }}"
{% endfor %}
)

# all of our zsh files
typeset -U config_files
config_files=()

# loop through roles and collect zsh config files
for role in ${roles}; do
  config_files+=(${DOTFILES}/roles/${role}/*.zsh(N))
done

# load the path files
for file in ${(M)config_files:#*/path.zsh}; do
  source $file
done

# load everything but the path and completion files
for file in ${${${config_files:#*/path.zsh}:#*/completion.zsh}:#*/final.zsh}; do
  source $file
done

# load every completion after autocomplete loads
for file in ${(M)config_files:#*/completion.zsh}; do
  source $file
done

for file in ${(M)config_files:#*/final.zsh}; do
  source $file
done

unset config_files

# Stash your environment variables in ~/.localrc. This means they'll stay out
# of your main dotfiles repository (which may be public, like this one), but
# you'll have access to them in your scripts.
if [[ -a ~/.localrc ]]; then
  source ~/.localrc
fi

# Plugins
### Added by Zinit's installer
if [[ ! -f $HOME/.local/share/zinit/zinit.git/zinit.zsh ]]; then
    print -P "%F{33} %F{220}Installing %F{33}ZDHARMA-CONTINUUM%F{220} Initiative Plugin Manager (%F{33}zdharma-continuum/zinit%F{220})â€¦%f"
    command mkdir -p "$HOME/.local/share/zinit" && command chmod g-rwX "$HOME/.local/share/zinit"
    command git clone https://github.com/zdharma-continuum/zinit "$HOME/.local/share/zinit/zinit.git" && \
        print -P "%F{33} %F{34}Installation successful.%f%b" || \
        print -P "%F{160} The clone has failed.%f%b"
fi

source "$HOME/.local/share/zinit/zinit.git/zinit.zsh"
autoload -Uz _zinit
(( ${+_comps} )) && _comps[zinit]=_zinit

# Load a few important annexes, without Turbo
# (this is currently required for annexes)
zinit light-mode for \
    zdharma-continuum/zinit-annex-as-monitor \
    zdharma-continuum/zinit-annex-bin-gem-node \
    zdharma-continuum/zinit-annex-patch-dl \
    zdharma-continuum/zinit-annex-rust

### End of Zinit's installer chunk

## Plugins
zi ice; zi light Aloxaf/fzf-tab

zi ice from"gh-r" as"program"
zi light junegunn/fzf

zi ice lucid wait"2"; zi load zsh-users/zsh-syntax-highlighting

{% if zsh.plugins.atuin %}
export ATUIN_NOBIND="true"
zi ice 
zi load atuinsh/atuin
{% endif %}

ZSH_AUTOSUGGEST_ACCEPT_WIDGETS=()
ZSH_AUTOSUGGEST_PARTIAL_ACCEPT_WIDGETS+=( forward-char forward-word end-of-line )
ZSH_AUTOSUGGEST_STRATEGY=(match_prev_cmd history completion)
ZSH_AUTOSUGGEST_HISTORY_IGNORE=$'(*\n*|?(#c80,)|*\\#:hist:push-line:)'
ZSH_AUTOSUGGEST_HIGHLIGHT_STYLE="fg=#888888,underline"

zi ice; zi load zsh-users/zsh-autosuggestions

# Load snippets
zinit snippet OMZL::directories.zsh
zinit snippet OMZP::sudo

# Reload autocomplete
zinit cdreplay -q

# Keybinds
bindkey "^ " end-of-line # [ctrl-space] - autocomplete suggestion
bindkey "^[[A" history-search-backward   # [up arrow]   - history backwards
bindkey "^[OA" history-search-backward   # [up arrow]   - history backwards
bindkey "^p" history-search-backward
bindkey "^[[B" history-search-forward # [down arrow] - history forwards
bindkey "^[OB" history-search-forward # [down arrow] - history forwards
bindkey "^n" history-search-forward
bindkey "^[[1;5C" forward-word  # [ctrl-left arrow]  - move full word
bindkey "^[[1;5D" backward-word # [ctrl-right arrow] - move full word
bindkey "${terminfo[khome]}" beginning-of-line # [home] - beginning of line
bindkey "${terminfo[kend]}"  end-of-line # [end] - end of line
bindkey "${terminfo[kcbt]}" reverse-menu-complete # [shift-tab] - move completion backwards
{% if zsh.plugins.atuin %}
bindkey "^r" _atuin_search_widget
{% endif %}

# Completion styling
zstyle ':completion:*' matcher-list 'm:{a-z}={A-Za-z}'
zstyle ':completion:*' list-colors "${(s.:.)LS_COLORS}"
zstyle ':completion:*' menu no
zstyle ':fzf-tab:complete:cd:*' fzf-preview 'ls --color=always $realpath'
zstyle ':fzf-tab:complete:z:*' fzf-preview 'ls --color=always $realpath'

# Source Cargo environment variables
source "$HOME/.cargo/env"

# Source (lazily) node version manager (NVM)
zi ice link lucid wait"2"
zi snippet /usr/share/nvm/init-nvm.sh

# Load starship theme
# line 1: `starship` binary as command, from github release
# line 2: starship setup at clone(create init.zsh, completion)
# line 3: pull behavior same as clone, source init.zsh
zinit ice as"command" from"gh-r" \
          atclone"./starship init zsh > init.zsh; ./starship completions zsh > _starship" \
          atpull"%atclone" src"init.zsh"
zinit light starship/starship

# Uncomment to profile zsh startup time
# zprof
