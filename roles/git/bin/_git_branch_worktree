#!/bin/env bash

script_name="git branch-worktree"

# Help function
show_help() {
    echo "Usage: $script_name <branch_name> [base_branch]"
    echo
    echo "Create a new git worktree based on a specified branch and place it in a directory"
    echo "with the same name as the branch in the root directory."
    echo
    echo "Arguments:"
    echo "  <branch_name>   Name of the new branch to create (mandatory)"
    echo "  [base_branch]   Base branch to create from (optional, defaults to origin/main)"
    echo
    echo "Example:"
    echo "  $script_name feature-123"
    echo "  $script_name bugfix-456 origin/develop"
    exit 1
}

# Check if we're in the root of a git worktree setup
check_repo_structure() {
    if [ ! -f .git ] || [ ! -d .bare ]; then
        echo "Error: Not in the root of a git worktree setup."
        echo "Expected to find .git file and .bare directory."
        exit 1
    fi
}

# Main function
main() {
    # Check arguments
    if [ $# -lt 1 ]; then
        show_help
    fi

    branch_name="$1"
    base_branch="${2:-origin/main}"

    # Check if we're in the root directory of the git worktree setup
    check_repo_structure

    # Check if the branch already exists
    if git --git-dir=.bare show-ref --verify --quiet "refs/heads/$branch_name"; then
        echo "Error: Branch '$branch_name' already exists."
        exit 1
    fi

    # Check if the directory already exists
    if [ -d "$branch_name" ]; then
        echo "Error: Directory '$branch_name' already exists."
        exit 1
    fi

    echo "Creating new worktree '$branch_name' based on '$base_branch'..."
    
    # Create the new worktree
    if git --git-dir=.bare worktree add -b "$branch_name" "$branch_name" "$base_branch"; then
        echo "Successfully created worktree '$branch_name' in directory '$branch_name'."
        echo "You can cd into it with: cd $branch_name"
    else
        echo "Error: Failed to create worktree."
        exit 1
    fi
}

# Execute main function with all arguments
main "$@"

